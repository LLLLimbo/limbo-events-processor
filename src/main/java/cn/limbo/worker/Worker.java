package cn.limbo.worker;

import io.zeebe.client.api.response.ActivatedJob;
import io.zeebe.client.api.worker.JobClient;
import io.zeebe.spring.client.annotation.ZeebeWorker;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

@Slf4j
@Component
public class Worker {

  private static void logJob(final ActivatedJob job) {
    log.info(
        "complete job\n>>> [type: {}, key: {}, element: {}, workflow instance: {}]\n{deadline; {}]\n[headers: {}]\n[variables: {}]",
        job.getType(),
        job.getKey(),
        job.getElementId(),
        job.getWorkflowInstanceKey(),
        Instant.ofEpochMilli(job.getDeadline()),
        job.getCustomHeaders(),
        job.getVariables());
  }

  private final String THROW_MSG = "Expected variable %s not found!";

  /**
   * Start decorate workflow. This workflow required houseId,contractId and userId.
   *
   * @see ZeebeWorker to see further worker configurations
   */
  @ZeebeWorker(type = "startDecorateWorkflow", name = "WorkFlow", fetchVariables = {
      "houseId", "contractId", "userId"})
  public String startDecorateWorkflowZeebeWorker(final JobClient client, final ActivatedJob job) {
    //Log job information.
    logJob(job);

    //Validate variable.
    String contractId = job.getVariablesAsMap().getOrDefault("contractId", "").toString();
    if (StringUtils.isEmpty(contractId)) {
      //Throw error if true.
      String errMsg = String.format(THROW_MSG, "contractId");

      client.newThrowErrorCommand(job.getKey())
          .errorCode("500")
          .errorMessage(errMsg)
          .send()
          .join();
      throw new RuntimeException(String.format(THROW_MSG, errMsg));
    }

    //Here's data generated by this job and could be used in other jobs.
    String decorateProcessInstanceId = UUID.randomUUID().toString();
    //....might be more

    Map<String, Object> generatedVar = new HashMap<>();
    generatedVar.put("decorateProcessInstanceId", decorateProcessInstanceId);

    //Complete with new-generated data.
    client.newCompleteCommand(job.getKey())
        .variables(generatedVar)
        .send()
        .join();

    return "Decorate workflow has been started";
  }

  @ZeebeWorker(type = "sendSms", name = "sms", fetchVariables = "phone")
  public String sendSmsZeebeWorker(final JobClient client, final ActivatedJob job) {
    logJob(job);

    String phone = job.getVariablesAsMap().getOrDefault("phone", "").toString();

    client.newCompleteCommand(job.getKey()).send().join();

    return String.format("Message has been sent to %s", phone);
  }
}
